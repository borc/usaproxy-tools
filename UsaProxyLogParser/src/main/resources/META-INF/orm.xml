<?xml version="1.0" encoding="UTF-8"?>

<entity-mappings 
  xmlns="http://java.sun.com/xml/ns/persistence/orm"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm orm_2_0.xsd"
  version="2.0">

    <package>fi.uta.infim.usaproxylogparser</package>

    <mapped-superclass class="UsaProxyVisibilityEvent">
        <attributes>
            <basic name="edge">
                <enumerated>STRING</enumerated>
            </basic>
        </attributes>
    </mapped-superclass>

    <entity class="UsaProxyDOMElement" name="DOMElement">
        <table name="DOMElement" />
        <attributes>
            <id name="id">
                <column name="id"/>
                <generated-value generator="DOMElementseqgenerator" strategy="IDENTITY"/>
                <sequence-generator name="DOMElementseqgenerator" sequence-name="DOMElementseq"/>
            </id>
            <many-to-one name="httpTraffic">
            </many-to-one>
            <one-to-many name="appears" target-entity="UsaProxyAppearanceEvent">
                <join-table name="elementAppearance">
                    <inverse-join-column name="event_id" />
                </join-table>
            </one-to-many>
            <one-to-many name="disappears" target-entity="UsaProxyDisappearanceEvent">
                <join-table name="elementDisappearance">
                    <inverse-join-column name="event_id" />
                </join-table>
            </one-to-many>
            
            <!-- Full contents will not be stored in a database. Truncated
                 contents string available in property 'truncatedContents'. -->
            <transient name="contents" />
            
            <!-- Business logic in inverse setter will take care of adding
                 elements to this collection -->
            <transient name="events" />
        </attributes>
    </entity>
    
    <entity class="UsaProxyHTTPTraffic" name="HTTPTraffic">
        <table name="HTTPTraffic" />
        <attributes>
            <id name="id">
                <column name="id"/>
                <generated-value generator="HTTPTrafficseqgenerator" strategy="IDENTITY"/>
                <sequence-generator name="HTTPTrafficseqgenerator" sequence-name="HTTPTrafficseq"/>
            </id>
            <many-to-one name="session" />
            <one-to-one name="entry">
                
            </one-to-one>
            <element-collection name="requestHeaders">
                <map-key-column name="name" />
                <column name="value" />
                <collection-table name="requestHeader">
                    <join-column name="httptraffic_id" />
                </collection-table>
            </element-collection>
            <element-collection name="responseHeaders">
                <map-key-column name="name" />
                <column name="value" />
                <collection-table name="responseHeader">
                    <join-column name="httptraffic_id" />
                </collection-table>
            </element-collection>
            
            <!-- Address is an InetAddress object, and it will not be stored
                 in a database. A string representation ('addressString')
                 will be stored and used to set the object representation
                 when loading objects from database. -->
            <transient name="address" />
            
            <!-- Business logic in inverse setter will take care of adding
                 elements to this collection -->
            <transient name="domElements" />
            
            <!-- Business logic in inverse setter will take care of adding
                 elements to this collection -->
            <transient name="screens" />
        </attributes>
    </entity>
    
    <entity class="UsaProxyLog" name="Log">
        <table name="Log" />
        <attributes>
            <id name="id">
                <column name="id"/>
                <generated-value generator="Logseqgenerator" strategy="IDENTITY"/>
                <sequence-generator name="Logseqgenerator" sequence-name="Logseq"/>
            </id>
            <one-to-many name="sessions">
                <join-column name="log_id" />
                <cascade>
                    <cascade-persist />
                    <cascade-merge />
                </cascade>
            </one-to-many>
            <one-to-many name="entries">
                <join-column name="log_id" />
                <cascade>
                    <cascade-persist />
                    <cascade-merge />
                </cascade>
            </one-to-many>
        </attributes>
    </entity>
    
    <entity class="UsaProxyLogEntry" name="LogEntry">
        <table name="LogEntry" />
        <inheritance strategy="SINGLE_TABLE"/>
        <discriminator-value>OTHER</discriminator-value>
        <discriminator-column name="ENTRYTYPE" discriminator-type="STRING"/>
        <attributes>
            <id name="id">
                <column name="id"/>
                <generated-value generator="LogEntryseqgenerator" strategy="IDENTITY"/>
                <sequence-generator name="LogEntryseqgenerator" sequence-name="LogEntryseq"/>
            </id>
        </attributes>
    </entity>
    
    <entity class="UsaProxyPageEvent" name="PageEvent">
        <table name="PageEvent" />
        <inheritance strategy="SINGLE_TABLE"/>
        <discriminator-value>OTHER</discriminator-value>
        <discriminator-column name="EVENTTYPE" discriminator-type="STRING"/> 
        <attributes>
            <id name="id">
                <column name="id"/>
                <generated-value generator="PageEventseqgenerator" strategy="IDENTITY"/>
                <sequence-generator name="PageEventseqgenerator" sequence-name="PageEventseq"/>
            </id>
            <basic name="type">
                <enumerated>STRING</enumerated>
            </basic>
            <many-to-one name="domPath">
                <cascade>
                    <cascade-persist />
                    <cascade-merge />
                </cascade>
            </many-to-one>
            <many-to-one name="screen">
                <cascade>
                    <cascade-persist />
                    <cascade-merge />
                </cascade>
            </many-to-one>
            <many-to-one name="httpTrafficSession">
            </many-to-one>
            <many-to-one name="session">
            </many-to-one>
            <one-to-one name="entry" />
            <element-collection name="attributes">
                <map-key-column name="name" />
                <column name="value" />
                <collection-table name="eventAttribute">
                    <join-column name="event_id" />
                </collection-table>
            </element-collection>
                
        </attributes>
    </entity>
        
    <entity class="UsaProxyScreen" name="Screen">
        <table name="Screen" />
        <attributes>
            <id name="id">
                <column name="id"/>
                <generated-value generator="Screenseqgenerator" strategy="IDENTITY"/>
                <sequence-generator name="Screenseqgenerator" sequence-name="Screenseq"/>
            </id>
            <many-to-one name="httpTrafficSession"></many-to-one>
            <one-to-one name="initialViewportEvent" target-entity="UsaProxyViewportChangeEvent"></one-to-one>
            <one-to-one name="scrollStart" target-entity="UsaProxyScrollStartEvent" />
            
            <!-- Business logic in inverse setter will take care of adding
                 elements to this collection -->
            <transient name="events" />
        </attributes>
    </entity>
    
    <entity class="UsaProxySession" name="Session">
        <table name="Session" />
        <attributes>
            <id name="id">
                <column name="id"/>
                <generated-value generator="Sessionseqgenerator" strategy="IDENTITY"/>
                <sequence-generator name="Sessionseqgenerator" sequence-name="Sessionseq"/>
            </id>
            
            <!-- This property is sorted at runtime. No need to store it in a DB. -->
            <transient name="sortedHttpTrafficSessions" />
            
            <!-- Address is an InetAddress object, and it will not be stored
                 in a database. A string representation ('addressString')
                 will be stored and used to set the object representation
                 when loading objects from database. -->
            <transient name="address" />
            
            <!-- Business logic in inverse setter will take care of adding
                 elements to this collection -->
            <transient name="httpTrafficSessions" />
        </attributes>
    </entity>
    
    <entity class="UsaProxyScrollStartEvent" name="ScrollStartEvent">
        <discriminator-value>SCROLLSTART</discriminator-value>
    </entity>
    
    <entity class="UsaProxyAppearanceEvent" name="AppearanceEvent">
        <discriminator-value>APPEARANCE</discriminator-value>
        <attributes>
        </attributes>
    </entity>
    
    <entity class="UsaProxyDisappearanceEvent" name="DisappearanceEvent">
        <discriminator-value>DISAPPEARANCE</discriminator-value>
    </entity>
    
    <entity class="UsaProxyViewportChangeEvent" name="ViewportChangeEvent">
        <discriminator-value>VIEWPORTCHANGE</discriminator-value>
    </entity>
    
    <entity class="UsaProxyHTTPTrafficStartEntry" name="HTTPTrafficStartEntry">
        <discriminator-value>HTTPTRAFFICSTART</discriminator-value>
        <attributes>
            <one-to-one name="httpTrafficSession" mapped-by="entry">
                <cascade>
                    <cascade-persist />
                    <cascade-merge />
                </cascade>
            </one-to-one>
        </attributes>
    </entity>
    
    <entity class="UsaProxyPageEventEntry" name="PageEventEntry">
        <discriminator-value>PAGEEVENT</discriminator-value>
        <attributes>
            <one-to-one name="event" target-entity="UsaProxyPageEvent" mapped-by="entry">
                <cascade>
                    <cascade-persist />
                    <cascade-merge />
                </cascade>
            </one-to-one>
        </attributes>
    </entity>
    
</entity-mappings>